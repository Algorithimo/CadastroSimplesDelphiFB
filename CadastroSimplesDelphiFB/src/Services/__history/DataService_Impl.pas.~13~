unit DataService_Impl;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.FB,
  FireDAC.Phys.FBDef, FireDAC.VCLUI.Wait, FireDAC.Phys.IBBase, FireDAC.Comp.UI,
  Data.DB, FireDAC.Comp.Client, System.IniFiles, FireDAC.Stan.Param,
  FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, FireDAC.Comp.DataSet,
  vcl.Dialogs, Vcl.Graphics, System.Types;

type
  TDataService = class(TDataModule)
    FDConnection: TFDConnection;
    FDGUIxWaitCursor: TFDGUIxWaitCursor;
    FDPhysFBDriverLink: TFDPhysFBDriverLink;
    qryPessoa: TFDQuery;
    dsPessoa: TDataSource;
    qryEndereco: TFDQuery;
    qryPessoaID_PESSOA: TLargeintField;
    qryPessoaIND_TIPO_PESSOA: TStringField;
    qryPessoaNUM_CPF_CNPJ: TStringField;
    qryPessoaNOM_PESSOA: TStringField;
    qryEnderecoID_ENDERECO: TLargeintField;
    qryEnderecoID_PESSOA: TLargeintField;
    qryEnderecoNUM_CEP: TStringField;
    qryEnderecoNUM_ENDERECO: TStringField;
    qryEnderecoNOM_ENDERECO: TStringField;
    qryEnderecoNOM_BAIRRO: TStringField;
    qryEnderecoNOM_MUNICIPIO: TStringField;
    qryEnderecoCOD_UF: TStringField;
    qryEnderecoTXT_COMPLEMENTO: TStringField;
    dsEndereco: TDataSource;
    procedure DataModuleCreate(Sender: TObject);
    procedure qryPessoaBeforePost(DataSet: TDataSet);
  private
    function IsCPF(const CPF: string): Boolean;
    function IsCNPJ(const CNPJ: string): Boolean;
  end;

var
  DataService: TDataService;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

uses Main;

{$R *.dfm}

procedure TDataService.DataModuleCreate(Sender: TObject);
var
    varIniFile : TIniFile;
    varDataBase : String;
    varUsername : String;
    varPassword : String;
    varServidor : String;
    varCaminho  : String;
    varPorta : Integer;
begin
    try
      FDConnection.Connected := false;

      varCaminho := ExtractFileDir(ParamStr(0)) + '\Login.ini';
      // FDPhysFBDriverLink.VendorHome := ExtractFileDir(ParamStr(0)) + 'dlls';

      varIniFile := TIniFile.Create(varCaminho);

      varDataBase := varIniFile.ReadString('Conexao', 'Database', varDataBase);
      varServidor := varIniFile.ReadString('Conexao', 'Servidor', varServidor);
      varPorta := varIniFile.ReadInteger('Conexao', 'Porta', varPorta);

      varUsername := 'SYSDBA';
      varPassword := 'masterkey';

      FDConnection.Params.Values['Database']  := varDataBase;
      FDConnection.Params.Values['Servidor']  := varServidor;
      FDConnection.Params.Values['Porta']  := varPorta.ToString;
      FDConnection.Params.Values['User_Name']  := varUsername;
      FDConnection.Params.Values['Passowrd']  := varPassword;
    finally

    FreeAndNil(varIniFile);

    end;
end;

function TDataService.IsCNPJ(const CNPJ: string): Boolean;
var
  dig13, dig14: string;
  sm, i, r, peso: integer;
begin
  if ((CNPJ = '00000000000000') or (CNPJ = '11111111111111') or
    (CNPJ = '22222222222222') or (CNPJ = '33333333333333') or
    (CNPJ = '44444444444444') or (CNPJ = '55555555555555') or
    (CNPJ = '66666666666666') or (CNPJ = '77777777777777') or
    (CNPJ = '88888888888888') or (CNPJ = '99999999999999') or
    (length(CNPJ) <> 14)) then
  begin
    IsCNPJ := false;
    exit;
  end;
  try
    sm := 0;
    peso := 2;
    for i := 12 downto 1 do
    begin
      sm := sm + (StrToInt(CNPJ[i]) * peso);
      peso := peso + 1;
      if (peso = 10) then
        peso := 2;
    end;
    r := sm mod 11;
    if ((r = 0) or (r = 1)) then
      dig13 := '0'
    else
      str((11 - r): 1, dig13);
    sm := 0;
    peso := 2;
    for i := 13 downto 1 do
    begin
      sm := sm + (StrToInt(CNPJ[i]) * peso);
      peso := peso + 1;
      if (peso = 10) then
        peso := 2;
    end;
    r := sm mod 11;
    if ((r = 0) or (r = 1)) then
      dig14 := '0'
    else
      str((11 - r): 1, dig14);
    if ((dig13 = CNPJ[13]) and (dig14 = CNPJ[14])) then
      IsCNPJ := true
    else
      IsCNPJ := false;
  except
    IsCNPJ := false
  end;
end;

function TDataService.IsCPF(const CPF: string): Boolean;
var
  dig10, dig11: string;
  s, i, r, peso: integer;
begin
  if ((CPF = '00000000000') or (CPF = '11111111111') or (CPF = '22222222222') or
    (CPF = '33333333333') or (CPF = '44444444444') or (CPF = '55555555555') or
    (CPF = '66666666666') or (CPF = '77777777777') or (CPF = '88888888888') or
    (CPF = '99999999999') or (length(CPF) <> 11)) then
  begin
    IsCPF := false;
    exit;
  end;
  try
    s := 0;
    peso := 10;
    for i := 1 to 9 do
    begin
      s := s + (StrToInt(CPF[i]) * peso);
      peso := peso - 1;
    end;
    r := 11 - (s mod 11);
    if ((r = 10) or (r = 11)) then
      dig10 := '0'
    else
      str(r: 1, dig10);
    s := 0;
    peso := 11;
    for i := 1 to 10 do
    begin
      s := s + (StrToInt(CPF[i]) * peso);
      peso := peso - 1;
    end;
    r := 11 - (s mod 11);
    if ((r = 10) or (r = 11)) then
      dig11 := '0'
    else
      str(r: 1, dig11);
    if ((dig10 = CPF[10]) and (dig11 = CPF[11])) then
      IsCPF := true
    else
      IsCPF := false;
  except
    IsCPF := false
  end;
end;

procedure TDataService.qryPessoaBeforePost(DataSet: TDataSet);
begin
  if DataSet.FieldByName('ind_tipo_pessoa').AsString = 'F' then
  begin
    if not IsCPF(DataSet.FieldByName('num_cpf_cnpj').AsString) then
    begin
      ShowMessage('CPF inválido.');
      Exit;
    end;
  end;
  if DataSet.FieldByName('ind_tipo_pessoa').AsString = 'J' then
  begin
    if not IsCNPJ(DataSet.FieldByName('num_cpf_cnpj').AsString) then
    begin
      ShowMessage('CNPJ inválido.');
      Exit;
    end;
  end;
end;

end.
