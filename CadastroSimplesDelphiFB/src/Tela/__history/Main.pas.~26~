unit Main;

interface

uses
  Winapi.Windows,
  Winapi.Messages,
  System.SysUtils,
  System.Variants,
  System.Classes,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  Vcl.ExtCtrls,
  Vcl.DBCtrls,
  Data.DB,
  Vcl.Grids,
  Vcl.DBGrids,
  Vcl.StdCtrls,
  Vcl.Buttons;

type
  TFormMain = class(TForm)
    DBNavigatorPessoa: TDBNavigator;
    GroupBoxPessoa: TGroupBox;
    DBGridPessoa: TDBGrid;
    GroupBox1: TGroupBox;
    DBNavigatorEndereco: TDBNavigator;
    DBGridEndereco: TDBGrid;
    PanelPessoa: TPanel;
    BitBtnApply: TBitBtn;
    Panel1: TPanel;
    GroupBox2: TGroupBox;
    EditFilter: TEdit;
    procedure FormCreate(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure BitBtnApplyClick(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure EditFilterChange(Sender: TObject);
  private
    function IsCPF(const CPF: string): Boolean;
    function IsCNPJ(const CNPJ: string): Boolean;
  end;

var
  FormMain: TFormMain;

implementation

{$R *.dfm}

uses
  DataService_Impl;

procedure TFormMain.BitBtnApplyClick(Sender: TObject);
begin
  DataService.FDConnection.Commit;
end;

procedure TFormMain.EditFilterChange(Sender: TObject);
begin
  if DataService.qryPessoa.Locate('nom_pessoa', EditFilter.Text, [loCaseInsensitive, loPartialKey]) then
  begin
    DataService.qryPessoa.Filter := 'nom_pessoa like ' + QuotedStr(EditFilter.Text + '%');
    DataService.qryPessoa.Filtered := True;
    Exit
  end;
  if (EditFilter.Text = EmptyStr) then
  begin
    DataService.qryPessoa.Filtered := False;
    DataService.qryPessoa.Filter := EmptyStr;
  end;
end;

procedure TFormMain.FormActivate(Sender: TObject);
begin
  EditFilter.SetFocus;
end;

procedure TFormMain.FormCreate(Sender: TObject);
begin
  DataService.qryPessoa.Close;
  DataService.qryPessoa.Open;
  DataService.qryEndereco.Close;
  DataService.qryEndereco.Open;
end;

procedure TFormMain.FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if Key = 27 then Self.Close;
end;

function TFormMain.IsCNPJ(const CNPJ: string): Boolean;
var
  dig13, dig14: string;
  sm, i, r, peso: integer;
begin
  // length - retorna o tamanho da string do CNPJ (CNPJ é um número formado por 14 dígitos)
  if ((CNPJ = '00000000000000') or (CNPJ = '11111111111111') or
    (CNPJ = '22222222222222') or (CNPJ = '33333333333333') or
    (CNPJ = '44444444444444') or (CNPJ = '55555555555555') or
    (CNPJ = '66666666666666') or (CNPJ = '77777777777777') or
    (CNPJ = '88888888888888') or (CNPJ = '99999999999999') or
    (length(CNPJ) <> 14)) then
  begin
    IsCNPJ := false;
    exit;
  end;

  // "try" - protege o código para eventuais erros de conversão de tipo através da função "StrToInt"
  try
    { *-- Cálculo do 1o. Digito Verificador --* }
    sm := 0;
    peso := 2;
    for i := 12 downto 1 do
    begin
      // StrToInt converte o i-ésimo caractere do CNPJ em um número
      sm := sm + (StrToInt(CNPJ[i]) * peso);
      peso := peso + 1;
      if (peso = 10) then
        peso := 2;
    end;
    r := sm mod 11;
    if ((r = 0) or (r = 1)) then
      dig13 := '0'
    else
      str((11 - r): 1, dig13);
    // converte um número no respectivo caractere numérico

    { *-- Cálculo do 2o. Digito Verificador --* }
    sm := 0;
    peso := 2;
    for i := 13 downto 1 do
    begin
      sm := sm + (StrToInt(CNPJ[i]) * peso);
      peso := peso + 1;
      if (peso = 10) then
        peso := 2;
    end;
    r := sm mod 11;
    if ((r = 0) or (r = 1)) then
      dig14 := '0'
    else
      str((11 - r): 1, dig14);

    { Verifica se os digitos calculados conferem com os digitos informados. }
    if ((dig13 = CNPJ[13]) and (dig14 = CNPJ[14])) then
      IsCNPJ := true
    else
      IsCNPJ := false;
  except
    IsCNPJ := false
  end;
end;

function TFormMain.IsCPF(const CPF: string): Boolean;
var
  dig10, dig11: string;
  s, i, r, peso: integer;
begin
  // length - retorna o tamanho da string (CPF é um número formado por 11 dígitos)
  if ((CPF = '00000000000') or (CPF = '11111111111') or (CPF = '22222222222') or
    (CPF = '33333333333') or (CPF = '44444444444') or (CPF = '55555555555') or
    (CPF = '66666666666') or (CPF = '77777777777') or (CPF = '88888888888') or
    (CPF = '99999999999') or (length(CPF) <> 11)) then
  begin
    IsCPF := false;
    exit;
  end;

  // try - protege o código para eventuais erros de conversão de tipo na função StrToInt
  try
    { *-- Cálculo do 1o. Digito Verificador --* }
    s := 0;
    peso := 10;
    for i := 1 to 9 do
    begin
      // StrToInt converte o i-ésimo caractere do CPF em um número
      s := s + (StrToInt(CPF[i]) * peso);
      peso := peso - 1;
    end;
    r := 11 - (s mod 11);
    if ((r = 10) or (r = 11)) then
      dig10 := '0'
    else
      str(r: 1, dig10); // converte um número no respectivo caractere numérico

    { *-- Cálculo do 2o. Digito Verificador --* }
    s := 0;
    peso := 11;
    for i := 1 to 10 do
    begin
      s := s + (StrToInt(CPF[i]) * peso);
      peso := peso - 1;
    end;
    r := 11 - (s mod 11);
    if ((r = 10) or (r = 11)) then
      dig11 := '0'
    else
      str(r: 1, dig11);

    { Verifica se os digitos calculados conferem com os digitos informados. }
    if ((dig10 = CPF[10]) and (dig11 = CPF[11])) then
      IsCPF := true
    else
      IsCPF := false;
  except
    IsCPF := false
  end;
end;

end.
